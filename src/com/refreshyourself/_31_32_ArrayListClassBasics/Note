
    -> Array
        1. Represent by square bracket[] on declaration.
        2. Can hold multiple value or same type: Primitives or reference type.
        3. Array is fixed size, can not add more items or take out items.
        4. Array Object can not be printed out directly to display all the elements.
        5. Array is ordered and can be accessed by index.
        6. Array allows duplicate.

    -> Collection Framework
        1. Collection Framework shipped with JDK.
        2. It provide many built in feature to work with data
        3. Provide different type of data structure like;
                -List, Set, Map, Queue

    -> ArrayList Class
        -Built into language, can be used after importing 1 of below
            import java.util.ArrayList;
            import java.util.*;
        -Unlike Array, it's resizable.
        -Can only hold objects, can not store primitives.
        -Ordered collection and allow duplicate.
        -Storing any type is possible but recommended to store only 1 type.


    ** Creating ArrayList Object
        //prior to java5
        ArrayList list1 = new ArrayList();

        //prior to java 7
        ArrayList<Type> list1 = new ArrayList<Type>();

        //java 7 and later
        ArrayList<Type> list1 = new ArrayList<>();

        //using List as reference Type
        List<Type> list1 = new ArrayList<>();

    -> ArrayList                    VS              Array
       Can be store only objects                    Can store primitives and objects
       Can be resized                               Has defined size and cannot be changed
       Can be printed directly to display elements  Can not be printed directly to display elements, Need Arrays.toString()

    -> Common ArrayList Methods
            add(Type element)               Adds the element to the end of this list
            get(int index)                  Returns the element at the specified position
            contains(Object element)        Returns true if element is in this list; otherwise, return false
            indexOf(Object element)         Returns the index of the first occurrence of element in this list
            clear()                         Removes all elements from this list
            size()                          Returns the numbers of elements in this list
            remove(int index)               Removes the element at the specified index of this list
            isEmpty()                       Returns true if this list is empty; otherwise, returns false
            set(int index, Object element)  Overwrite the value at given index
            .....                                       .... and more


